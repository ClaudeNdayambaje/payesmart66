// Script de correction des filtres pour la page nos-accessoires.html
// Version 1.0.0

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Script de correction des filtres charg√©');
    
    // Fonction pour configurer correctement les filtres de cat√©gories
    function fixCategoryFilters() {
        console.log('üîß Initialisation de la correction des filtres...');
        
        // 1. S√©lectionner les √©l√©ments du DOM
        const categoryFilter = document.querySelector('.category-filter');
        const accessoireCards = document.querySelectorAll('.accessoire-card');
        
        // Si pas de filtre ou pas de cartes, arr√™ter
        if (!categoryFilter || accessoireCards.length === 0) {
            console.log('‚ö†Ô∏è √âl√©ments requis non trouv√©s, impossible de corriger les filtres');
            return;
        }
        
        console.log(`üìä Trouv√© ${accessoireCards.length} cartes d'accessoires`);
        
        // 2. V√©rifier et fixer les attributs des cartes d'accessoires
        accessoireCards.forEach(card => {
            // Assurer que chaque carte a un attribut data-category
            if (!card.getAttribute('data-category')) {
                // Essayer de r√©cup√©rer depuis data-filter si disponible
                const filterAttr = card.getAttribute('data-filter');
                if (filterAttr) {
                    card.setAttribute('data-category', filterAttr);
                    console.log(`üîÑ Carte corrig√©e: data-filter ‚Üí data-category = ${filterAttr}`);
                } else {
                    // Attribuer une cat√©gorie par d√©faut
                    card.setAttribute('data-category', 'autre');
                    console.log('üîÑ Carte sans cat√©gorie corrig√©e: data-category = autre');
                }
            }
        });
        
        // 3. V√©rifier et cr√©er les boutons de filtre si n√©cessaires
        const filterButtons = categoryFilter.querySelectorAll('button');
        if (filterButtons.length === 0) {
            console.log('‚ö†Ô∏è Aucun bouton de filtre trouv√©, cr√©ation des boutons...');
            
            // Cr√©er le bouton "Tous"
            const allButton = document.createElement('button');
            allButton.classList.add('active');
            allButton.setAttribute('data-category', 'all');
            allButton.textContent = 'Tous';
            categoryFilter.appendChild(allButton);
            
            // Collecter toutes les cat√©gories uniques des cartes
            const categories = new Set();
            accessoireCards.forEach(card => {
                const category = card.getAttribute('data-category');
                if (category && category !== 'all') {
                    categories.add(category);
                }
            });
            
            // Cr√©er un bouton pour chaque cat√©gorie
            categories.forEach(category => {
                const button = document.createElement('button');
                button.setAttribute('data-category', category);
                
                // Convertir le slug en texte plus lisible
                let displayName = category.replace(/-/g, ' ');
                displayName = displayName.charAt(0).toUpperCase() + displayName.slice(1);
                
                button.textContent = displayName;
                categoryFilter.appendChild(button);
                console.log(`‚ûï Bouton cr√©√©: ${displayName}`);
            });
        } else {
            console.log(`üìä Trouv√© ${filterButtons.length} boutons de filtre existants`);
            
            // Assurer que chaque bouton a data-category (pas data-filter)
            filterButtons.forEach(button => {
                if (!button.getAttribute('data-category')) {
                    const filterAttr = button.getAttribute('data-filter');
                    if (filterAttr) {
                        button.setAttribute('data-category', filterAttr);
                        console.log(`üîÑ Bouton corrig√©: data-filter ‚Üí data-category = ${filterAttr}`);
                    }
                }
            });
        }
        
        // 4. Configurer les gestionnaires d'√©v√©nements pour les boutons
        const updatedButtons = categoryFilter.querySelectorAll('button');
        updatedButtons.forEach(button => {
            // Supprimer d'abord les gestionnaires existants pour √©viter les doublons
            button.replaceWith(button.cloneNode(true));
        });
        
        // Reconfigurer avec des gestionnaires frais
        const freshButtons = categoryFilter.querySelectorAll('button');
        freshButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                console.log(`üñ±Ô∏è Clic sur le bouton: ${this.textContent}`);
                
                // Mettre √† jour la classe active
                freshButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                
                // R√©cup√©rer la valeur du filtre
                const filterValue = this.getAttribute('data-category');
                console.log(`üîç Filtrage par cat√©gorie: ${filterValue}`);
                
                // Ajouter une classe au body pour les styles CSS
                document.body.classList.add('js-filters-active');
                
                // Filtrer les cartes
                accessoireCards.forEach(card => {
                    const cardCategory = card.getAttribute('data-category');
                    
                    if (filterValue === 'all') {
                        card.style.display = 'block';
                        card.classList.add('visible');
                        console.log(`‚úÖ Accessoire affich√© (all): ${card.querySelector('h3')?.textContent || 'Sans titre'}`);
                    } else if (cardCategory === filterValue) {
                        card.style.display = 'block';
                        card.classList.add('visible');
                        console.log(`‚úÖ Accessoire affich√© (match): ${card.querySelector('h3')?.textContent || 'Sans titre'}`);
                    } else {
                        card.style.display = 'none';
                        card.classList.remove('visible');
                        console.log(`‚ùå Accessoire masqu√©: ${card.querySelector('h3')?.textContent || 'Sans titre'}`);
                    }
                });
            });
        });
        
        // 5. D√©clencher le filtre "Tous" par d√©faut pour s'assurer que tout est visible au d√©part
        const allButton = categoryFilter.querySelector('button[data-category="all"]');
        if (allButton) {
            console.log('üîÑ Activation du filtre "Tous" par d√©faut');
            allButton.click();
        }
        
        console.log('‚úÖ Correction des filtres termin√©e avec succ√®s');
    }
    
    // Ex√©cuter la fonction de correction apr√®s un court d√©lai pour s'assurer que tout est charg√©
    setTimeout(fixCategoryFilters, 500);
    
    // R√©ex√©cuter si le DOM change significativement (comme apr√®s le chargement des accessoires)
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList' && 
                (mutation.target.classList.contains('accessoires-grid') || 
                 mutation.target.classList.contains('category-filter'))) {
                console.log('üîÑ Changement d√©tect√© dans le DOM, r√©application de la correction des filtres');
                setTimeout(fixCategoryFilters, 200);
            }
        });
    });
    
    // Observer les changements dans la grille d'accessoires et les filtres
    const accessoiresGrid = document.querySelector('.accessoires-grid');
    const categoryFilter = document.querySelector('.category-filter');
    
    if (accessoiresGrid) {
        observer.observe(accessoiresGrid, { childList: true, subtree: true });
    }
    
    if (categoryFilter) {
        observer.observe(categoryFilter, { childList: true, subtree: true });
    }
});
