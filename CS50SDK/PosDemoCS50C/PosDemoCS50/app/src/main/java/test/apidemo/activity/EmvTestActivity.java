package test.apidemo.activity;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;

import com.ctk.sdk.PosApiHelper;
import java.util.Arrays;


/**
 * Created by Administrator on 2017/12/12.
 */

public class EmvTestActivity extends Activity implements View.OnClickListener {

    public static final String TAG = EmvTestActivity.class.getSimpleName();

    PosApiHelper mPosApiHelper = PosApiHelper.getInstance();

    private Context mContext;
    private Bitmap mKeypadLogo = null;
    private TextView tvEmvMsg;
    private Button mTestEmvBtn;
    private Button mTestPinBlock;
    private Button mTestDukptPinBlock;

    private WorkHandler mWorkHandler;
    private HandlerThread mWorkThread;
    private boolean mThreadFinished = false;


    private byte track1[] = new byte[250];
    private byte track2[] = new byte[250];
    private byte track3[] = new byte[250];


    byte[] TermParabuf = {
            (byte) 0xDF, 0x18, 0x07, (byte) 0xF4, (byte) 0xE0, (byte) 0xF8, (byte) 0xE4, (byte) 0xEB, (byte) 0xF2, (byte) 0xA0, (byte) 0x9F, 0x35, 0x01, 0x22, (byte) 0x9F, 0x33, 0x03, (byte) 0xE0, (byte) 0xD0, (byte) 0xC8, (byte) 0x9F, 0x40, 0x05, 0x60,
            0x00, (byte) 0xF0, (byte) 0xF0, 0x01, (byte) 0xDF, 0x19, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x26, 0x0F, (byte) 0x9F, 0x02, 0x06, 0x5F, 0x2A, 0x02,
            (byte) 0x9A, 0x03, (byte) 0x9C, 0x01, (byte) 0x95, 0x05, (byte) 0x9F, 0x37, 0x04, (byte) 0xDF, 0x40, 0x01, (byte) 0xFF, (byte) 0x9F, 0x39, 0x01, 0x05, (byte) 0x9F, 0x1A, 0x02, 0x01, 0x56, (byte) 0x9F, 0x1E,
            0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0xDF, 0x42, 0x01, 0x00, (byte) 0xDF, 0x43, 0x01, 0x00, (byte) 0xDF, 0x44, 0x01, 0x00, (byte) 0xDF, 0x45, 0x01,
            0x00, (byte) 0xDF, 0x46, 0x01, 0x01, (byte) 0x9F, 0x66, 0x04, 0x74, 0x00, 0x00, (byte) 0x80,  (byte) 0xDF, 0x47, 0x05, (byte) 0xAF, 0x61, (byte) 0xFF, 0x0C, 0x07

    };
    byte[] test0 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0,0x00,0x00,0x00,0x03,0x10,0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test1 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0,0x00,0x00,0x00,0x04,0x10,0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test2 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0,0x00,0x00,0x01,0x52,0x30,0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test3 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0,0x00,0x00,0x01,0x52,0x30,0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test4 = {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0,0x00,0x00,0x00,0x25,0x01,0x05,0x01, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test5 = {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0,0x00,0x00,0x03,0x33,0x01,0x01,0x02, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test6 = {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0,0x00,0x00,0x03,0x33,0x01,0x01,0x01, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test7= {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0,0x00,0x00,0x00,(byte)0x99,(byte)0x90,(byte)0x90, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test8= {
            (byte) 0x9F, 0x06, 0x06, (byte) 0xA0,0x00,0x00,(byte)0x99,(byte)0x99,0x01, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test9= {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x04, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test10= {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x05, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test11= {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x06, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test12= {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x07, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test13= {
            (byte) 0x9F, 0x06, 0x05, (byte) 0xA1,0x22,0x33,0x44,0x55, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test14= {
            (byte) 0x9F, 0x06, 0x10, (byte) 0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test15 ={
            (byte) 0x9F, 0x06, 0x08, (byte)0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x09, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test16 ={
            (byte) 0x9F, 0x06, 0x08, (byte)0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x0A, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test17 ={
            (byte) 0x9F, 0x06, 0x08, (byte)0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x0B, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test18= {
            (byte) 0x9F, 0x06, 0x08, (byte)0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x0C, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test19 ={
            (byte) 0x9F, 0x06, 0x08, (byte)0xA0,0x00,0x00,0x00,0x03,0x10,0x10,0x03, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] test20 ={
            (byte) 0x9F, 0x06, 0x08, (byte)0xA0,0x00,0x00,0x00,0x03,0x33,0x01,0x01, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };

    byte[] Visaaid0 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };


    byte[] VISAaid1 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0, 0x00, 0x00, 0x00, 0x03, 0x20, 0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, (byte) 0x9F, 0x1C, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x21, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };
    byte[] UnionPay_Debit = {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x01, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, (byte) 0x9F, 0x1C, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };
    byte[] UnionPay_Credit = {
            (byte) 0x9F, 0x06, 0x08, (byte) 0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x02, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, (byte) 0x9F, 0x1C, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };
    byte[] Master0 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, (byte) 0x9F, 0x1C, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };
    byte[] Master1 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0, 0x00, 0x00, 0x00, 0x04, 0x30, 0x60, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, (byte) 0x9F, 0x1C, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };
    byte[] MIRAID0 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0, 0x00, 0x00, 0x06, 0x58, 0x20, 0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,

            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, (byte) 0x9F, 0x1C, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };
    byte[] MIRAID1 = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0, 0x00, 0x00, 0x06, 0x58, 0x10, 0x10, (byte) 0x9F, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0x9F, 0x09, 0x02, 0x00,
            0x20, (byte) 0x9F, 0x15, 0x02, 0x00, 0x01, (byte) 0x9F, 0x16, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, (byte) 0x9F, 0x4E, 0x12, (byte) 0xD2, (byte) 0xF8, (byte) 0xC1,
            (byte) 0xAA, (byte) 0xC9, (byte) 0xCC, (byte) 0xCE, (byte) 0xF1, (byte) 0xC9, (byte) 0xEE, (byte) 0xDB, (byte) 0xDA, (byte) 0xB7, (byte) 0xD6, (byte) 0xB9, (byte) 0xAB, (byte) 0xCB, (byte) 0xBE, (byte) 0xDF, 0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00,
            0x00, (byte) 0xDF, 0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF, 0x14, 0x03, (byte) 0x9f, 0x37, 0x04,
            (byte) 0xDF, 0x15, 0x04, 0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32, (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01, (byte) 0x9F, 0x1B, 0x04, 0x00,
            0x01, (byte) 0x86, (byte) 0xA0, (byte) 0x9F, 0x1C, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, (byte) 0x88, 0x5F, 0x2A, 0x02, 0x01, 0x56, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x01, 0x56, (byte) 0x9F, 0x3D, 0x01, 0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01, 0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00,
            0x05, 0x00, 0x00, (byte) 0xDF, 0x20, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, (byte) 0x9F, 0x7B,
            0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
    };
    byte[] capk1buf = {
            (byte) 0x9f, 0x22, 0x01, (byte) 0x32,
            (byte) 0x9f, 0x06, 0x07, (byte) 0xa0, 0x00, 0x00, 0x06, 0x58, 0x10, 0x10,
            (byte) 0xdf, 0x05, 0x08, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x33, 0x31,
            (byte) 0xdf, 0x06, 0x01, 0x01,
            (byte) 0xdf, 0x07, 0x01, 0x01,
            (byte) 0xdf, 0x04, 0x03, 0x01, 0x00, 0x01,
            (byte) 0xdf, 0x03, 0x14, 0x25, 0x1A, 0x5F, 0x5D,
            (byte) 0xE6, 0x1C, (byte) 0xF2, (byte) 0x8B, 0x5C, 0x6E, 0x2B, 0x58, 0x07,
            (byte) 0xC0, 0x64, 0x4A,
            0x01, (byte) 0xD4, 0x6F, (byte) 0xF5,
            (byte) 0xdf, 0x02, (byte) 0x60,
            (byte) 0x94, 0x2B, 0x7F, 0x2B, (byte) 0xA5, (byte) 0xEA, 0x30, 0x73, 0x12, (byte) 0xB6, 0x3D, (byte) 0xF7, 0x7C, 0x52, 0x43, 0x61,
            (byte) 0x8A, (byte) 0xCC, 0x20, 0x02, (byte) 0xBD, 0x7E, (byte) 0xCB, 0x74, (byte) 0xD8, 0x21, (byte) 0xFE, 0x7B, (byte) 0xDC, 0x78, (byte) 0xBF, 0x28,
            (byte) 0xF4, (byte) 0x9F, 0x74, 0x19, 0x0A, (byte) 0xD9, (byte) 0xB2, 0x3B, (byte) 0x97, 0x13, (byte) 0xB1, 0x40, (byte) 0xFF, (byte) 0xEC, 0x1F, (byte) 0xB4,
            (byte) 0x29, (byte) 0xD9, 0x3F, 0x56, (byte) 0xBD, (byte) 0xC7, (byte) 0xAD, (byte) 0xE4, (byte) 0xAC, 0x07, 0x5D, 0x75, 0x53, 0x2C, 0x1E, 0x59,
            (byte) 0x0B, 0x21, (byte) 0x87, 0x4C, 0x79, 0x52, (byte) 0xF2, (byte) 0x9B, (byte) 0x8C, 0x0F, 0x0C, 0x1C, (byte) 0xE3, (byte) 0xAE, (byte) 0xED, (byte) 0xC8,
            (byte) 0xDA, 0x25, 0x34, 0x31, 0x23, (byte) 0xE7, 0x1D, (byte) 0xCF, (byte) 0x86, (byte) 0xC6, (byte) 0x99, (byte) 0x8E, 0x15, (byte) 0xF7, 0x56, (byte) 0xE3
    };
    byte[] capk2buf = {
            (byte) 0x9f, 0x22, 0x01, (byte) 0x57,
            (byte) 0x9f, 0x06, 0x07, (byte) 0xa0, 0x00, 0x00, 0x06, 0x58, 0x10, 0x10,
            (byte) 0xdf, 0x05, 0x08, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x33, 0x31,
            (byte) 0xdf, 0x06, 0x01, 0x01,
            (byte) 0xdf, 0x07, 0x01, 0x01,
            (byte) 0xdf, 0x04, 0x03, 0x01, 0x00, 0x01,
            (byte) 0xdf, 0x03, 0x14, 0x25, 0x1A, 0x5F, 0x5D,
            (byte) 0xE6, 0x1C, (byte) 0xF2, (byte) 0x8B, 0x5C, 0x6E, 0x2B, 0x58, 0x07,
            (byte) 0xC0, 0x64, 0x4A,
            0x01, (byte) 0xD4, 0x6F, (byte) 0xF5,
            (byte) 0xdf, 0x02, (byte) 0x60,
            (byte) 0x94, 0x2B, 0x7F, 0x2B, (byte) 0xA5, (byte) 0xEA, 0x30, 0x73, 0x12, (byte) 0xB6, 0x3D, (byte) 0xF7, 0x7C, 0x52, 0x43, 0x61,
            (byte) 0x8A, (byte) 0xCC, 0x20, 0x02, (byte) 0xBD, 0x7E, (byte) 0xCB, 0x74, (byte) 0xD8, 0x21, (byte) 0xFE, 0x7B, (byte) 0xDC, 0x78, (byte) 0xBF, 0x28,
            (byte) 0xF4, (byte) 0x9F, 0x74, 0x19, 0x0A, (byte) 0xD9, (byte) 0xB2, 0x3B, (byte) 0x97, 0x13, (byte) 0xB1, 0x40, (byte) 0xFF, (byte) 0xEC, 0x1F, (byte) 0xB4,
            (byte) 0x29, (byte) 0xD9, 0x3F, 0x56, (byte) 0xBD, (byte) 0xC7, (byte) 0xAD, (byte) 0xE4, (byte) 0xAC, 0x07, 0x5D, 0x75, 0x53, 0x2C, 0x1E, 0x59,
            (byte) 0x0B, 0x21, (byte) 0x87, 0x4C, 0x79, 0x52, (byte) 0xF2, (byte) 0x9B, (byte) 0x8C, 0x0F, 0x0C, 0x1C, (byte) 0xE3, (byte) 0xAE, (byte) 0xED, (byte) 0xC8,
            (byte) 0xDA, 0x25, 0x34, 0x31, 0x23, (byte) 0xE7, 0x1D, (byte) 0xCF, (byte) 0x86, (byte) 0xC6, (byte) 0x99, (byte) 0x8E, 0x15, (byte) 0xF7, 0x56, (byte) 0xE3
    };
    byte[] capk3buf = {
            (byte) 0x9f, 0x22, 0x01, (byte) 0x57,
            (byte) 0x9f, 0x06, 0x07, (byte) 0xa0, 0x00, 0x00, 0x06, 0x58, 0x10, 0x10,
            (byte) 0xdf, 0x05, 0x08, 0x32, 0x30, 0x32, 0x30, 0x31, 0x32, 0x33, 0x31,
            (byte) 0xdf, 0x06, 0x01, 0x01,
            (byte) 0xdf, 0x07, 0x01, 0x01,
            (byte) 0xdf, 0x04, 0x03, 0x01, 0x00, 0x01,
            (byte) 0xdf, 0x03, 0x14, 0x25, 0x1A, 0x5F, 0x5D,
            (byte) 0xE6, 0x1C, (byte) 0xF2, (byte) 0x8B, 0x5C, 0x6E, 0x2B, 0x58, 0x07,
            (byte) 0xC0, 0x64, 0x4A,
            0x01, (byte) 0xD4, 0x6F, (byte) 0xF5,
            (byte) 0xdf, 0x02, (byte) 0x60,
            (byte) 0x94, 0x2B, 0x7F, 0x2B, (byte) 0xA5, (byte) 0xEA, 0x30, 0x73, 0x12, (byte) 0xB6, 0x3D, (byte) 0xF7, 0x7C, 0x52, 0x43, 0x61,
            (byte) 0x8A, (byte) 0xCC, 0x20, 0x02, (byte) 0xBD, 0x7E, (byte) 0xCB, 0x74, (byte) 0xD8, 0x21, (byte) 0xFE, 0x7B, (byte) 0xDC, 0x78, (byte) 0xBF, 0x28,
            (byte) 0xF4, (byte) 0x9F, 0x74, 0x19, 0x0A, (byte) 0xD9, (byte) 0xB2, 0x3B, (byte) 0x97, 0x13, (byte) 0xB1, 0x40, (byte) 0xFF, (byte) 0xEC, 0x1F, (byte) 0xB4,
            (byte) 0x29, (byte) 0xD9, 0x3F, 0x56, (byte) 0xBD, (byte) 0xC7, (byte) 0xAD, (byte) 0xE4, (byte) 0xAC, 0x07, 0x5D, 0x75, 0x53, 0x2C, 0x1E, 0x59,
            (byte) 0x0B, 0x21, (byte) 0x87, 0x4C, 0x79, 0x52, (byte) 0xF2, (byte) 0x9B, (byte) 0x8C, 0x0F, 0x0C, 0x1C, (byte) 0xE3, (byte) 0xAE, (byte) 0xED, (byte) 0xC8,
            (byte) 0xDA, 0x25, 0x34, 0x31, 0x23, (byte) 0xE7, 0x1D, (byte) 0xCF, (byte) 0x86, (byte) 0xC6, (byte) 0x99, (byte) 0x8E, 0x15, (byte) 0xF7, 0x56, (byte) 0xE3
    };
    byte[] aidTmp = {
            (byte) 0x9F, 0x06, 0x07, (byte) 0xA0, 0x00, 0x00, 0x00, 0x03,
            0x10, 0x10, (byte) 0x9F, 0x1C, 0x04, 0x11, 0x00, 0x00,
            0x11, (byte) 0x9F, 0x16, 0x0F, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30,
            0x31, 0x32, 0x35, (byte) 0x9F, 0x15, 0x02, 0x12, 0x34,
            (byte) 0x9F, 0x4E, 0x06, 0x53, 0x48, 0x4F, 0x50, 0x20,
            0x31, (byte) 0x9F, 0x01, 0x06, 0x01, 0x23, 0x45, 0x67,
            (byte) 0x89, 0x10, (byte) 0x9F, 0x09, 0x02, 0x00, (byte) 0x96, (byte) 0xDF,
            0x11, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF,
            0x13, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF,
            0x12, 0x05, (byte) 0xCC, 0x00, 0x00, 0x00, 0x00, (byte) 0xDF,
            0x14, 0x03, (byte) 0x9F, 0x37, 0x04, (byte) 0xDF, 0x15, 0x04,
            0x00, 0x00, (byte) 0x9C, 0x40, (byte) 0xDF, 0x16, 0x01, 0x32,
            (byte) 0xDF, 0x17, 0x01, 0x14, (byte) 0xDF, 0x18, 0x01, 0x01,
            (byte) 0x9F, 0x1B, 0x04, 0x00, 0x01, (byte) 0x86, (byte) 0xA0, 0x5F,
            0x2A, 0x02, 0x08, 0x40, 0x5F, 0x36, 0x01, 0x02,
            (byte) 0x9F, 0x3C, 0x02, 0x08, 0x40, (byte) 0x9F, 0x3D, 0x01,
            0x02, (byte) 0x9F, 0x1D, 0x01, 0x01, (byte) 0xDF, 0x01, 0x01,
            0x00, (byte) 0xDF, 0x19, 0x06, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x50, (byte) 0xDF, 0x20, 0x06, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x64, (byte) 0xDF, 0x21, 0x06, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x32, (byte) 0x9F, 0x7B, 0x06, 0x00,
            0x00, 0x00, 0x00, 0x27, 0x10
    };

    String Emv_Capkinput = "9F2201059F0605A000000004DF05083230323131323331DF060101DF070101DF040103DF0314EBFA0D5D06D8CE702DA3EAE890701D45E274C845DF0281B0B8048ABC30C90D976336543E3FD7091C8FE4800DF820ED55E7E94813ED00555B573FECA3D84AF6131A651D66CFF4284FB13B635EDD0EE40176D8BF04B7FD1C7BACF9AC7327DFAA8AA72D10DB3B8E70B2DDD811CB4196525EA386ACC33C0D9D4575916469C4E4F53E8E1C912CC618CB22DDE7C3568E90022E6BBA770202E4522A2DD623D180E215BD1D1507FE3DC90CA310D27B3EFCCD8F83DE3052CAD1E48938C68D095AAC91B5F37E28BB49EC7ED597";
    //***************************************************************************//
    //*****--PAYPASS Parameter Settings--Start**********************************//
    String Reader_input = "9F01060000000000019F150201029F1A020056DF81170100";
    String Kernel_input = "DF6000DF6200DF6300DF810800DF810900DF810A00DF810C0102DF810D00DF811C020000DF811D0100";
    String Aid_input0 = "9C01009F0607A0000000071010DF810C0102DF811B01209F090200029F1D086CFF0000000000009F3501229F33009F400500000000009F6D0200019F7E00DF811A039F6A04DF811F0108DF811801F8DF811901F8DF812C0100DF811E0110DF812306000000010000DF812406000000030000DF812506000000050000DF812606000000004000DF8120050000000000DF8121050000000000DF8122050000000000";
    String Capk_input = "DF0105A000000004DF0201F1DF030103DF0481B0A0DCF4BDE19C3546B4B6F0414D174DDE294AABBB828C5A834D73AAE27C99B0B053A90278007239B6459FF0BBCD7B4B9C6C50AC02CE91368DA1BD21AAEADBC65347337D89B68F5C99A09D05BE02DD1F8C5BA20E2F13FB2A27C41D3F85CAD5CF6668E75851EC66EDBF98851FD4E42C44C1D59F5984703B27D5B9F21B8FA0D93279FBBF69E090642909C9EA27F898959541AA6757F5F624104F6E1D3A9532F2A6E51515AEAD1B43B3D7835088A2FAFA7BE7DF0514D8E68DA167AB5A85D8C3D55ECB9B0517A1A5B4BB";
    String Capk_input1 = "DF0105A000000004DF0201FADF030103DF048190A90FCD55AA2D5D9963E35ED0F440177699832F49C6BAB15CDAE5794BE93F934D4462D5D12762E48C38BA83D8445DEAA74195A301A102B2F114EADA0D180EE5E7A5C73E0C4E11F67A43DDAB5D55683B1474CC0627F44B8D3088A492FFAADAD4F42422D0E7013536C3C49AD3D0FAE96459B0F6B1B6056538A3D6D44640F94467B108867DEC40FAAECD740C00E2B7A8852DDF05145BED4068D96EA16D2D77E03D6036FC7A160EA99C";

    String Capk_input2 = "DF0105A000000004DF020105DF030103DF048180A1F5E1C9BD8650BD43AB6EE56B891EF7459C0A24FA84F9127D1A6C79D4930F6DB1852E2510F18B61CD354DB83A356BD190B88AB8DF04284D02A4204A7B6CB7C5551977A9B36379CA3DE1A08E69F301C95CC1C20506959275F41723DD5D2925290579E5A95B0DF6323FC8E9273D6F849198C4996209166D9BFC973C361CC826E1DF051453D04903B496F59544A84309AF169251F2896874";
    //  String Trans_input = "DF0101009C01009F02060000000000019F03060000000000005F2A0209785F3601025F57009F5301019F7C141020000000000000000000000000000000000001";
    String Trans_input = "9C01009F02060000000000029F03060000000000025F2A0208405F3601029F530101";
    String Aid_inputT = "9C01009F0607A0000000043060DF810C0102DF811B01209F090200029F1D084C7A8000000000009F3501229F3303E0F8C89F40056000F0A0019F6D0200019F7E00DF811A039F6A04DF811F0108DF81180196DF811901F8DF812C0110DF811E0100DF812306000000000000DF812406000000050000DF812506000000050000DF812606000000090001DF812005F45084800CDF8121050000800000DF812205F45084800C";
    String PaypassAid_input = "9C01009F0607A0000000041010DF810C0102DF811B01209F090200029F1D036CF8809F3501119F3303E0F8C89F40056000F0A0019F6D0200019F7E00DF811A039F6A04DF811F0108DF81180160DF81190108DF812C0110DF811E0100DF812306000000000000DF812406000000050000DF812506000000050000DF812606000000009000DF8120050000000000DF8121050000000000DF8122057CD8FCF8F0";



    //*****--PAYwave Parameter Settings--End--*************************************//
    //***************************************************************************//
    String AID_input1 = "9F0608A000000333010102DF010101DF11050020000000DF12050020000000DF13050020000000DF14039F3704DF150400000000DF160100DF1701009F1B04000099999F090200309F150212349F160F3030303030303030303030303030309F4E085465726D696E616C9F1C084261636B393631329F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208419F010512345678919F7B06000000010000DF1906000000011000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input2 = "9F0607A0000000031010DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000050009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208429F010512345678919F7B06000000010000DF1906000000010000DF2006000000020000DF2106000000010000DFC108010000000000";
    String AID_input3 = "9F0607A0000000999090DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000110009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208439F010512345678919F7B06000000010000DF1906000000012000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input4 = "9F0606A00000999901DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000120009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208449F010512345678919F7B06000000010000DF1906000000013000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input5 = "9F0605A000000003DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000130009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208459F010512345678919F7B06000000010000DF1906000000014000DF2006000000020000DF2106000000010000DFC108010100000000";
    String AID_input6 = "9F0606A00000000310DF010101DF11050000000000DF12050000000000DF13050000000000DF14039F3704DF150400000000DF160100DF1701009F1B04000140009F090200969F150212349F160F3030303030303030303030303030309F4E0653484F5020319F1C0846726F6E743132339F1D01015F3601029F3C020840DF81010208409F3D0102DF8102039F37045F2A0208469F010512345678919F7B06000000010000DF1906000000016000DF2006000000020000DF2106000000010000DFC108010100000000";

    String CAPK_input1 = "9F0605A0000099999F2201E1DF070101DF060101DF027099C5B70AA61B4F4C51B6F90B0E3BFB7A3EE0E7DB41BC466888B3EC8E9977C762407EF1D79E0AFB2823100A020C3E8020593DB50E90DBEAC18B78D13F96BB2F57EEDDC30F256592417CDF739CA6804A10A29D2806E774BFA751F22CF3B65B38F37F91B4DAF8AEC9B803F7610E06AC9E6BDF040103DF050420201231DF0314FD3857DA1D0B38F7E740E364071C0C91F26BC454";
    String CAPK_input2 = "9F0605A0000099999F2201E2DF070101DF060101DF0270BD232E348B118EB3F6446EF4DA6C3BAC9B2AE510C5AD107D38343255D21C4BDF4952A42E92C633B1CE4BFEC39AFB6DFE147ECBB91D681DAC15FB0E198E9A7E4636BDCA107BCDA3384FCB28B06AFEF90F099E7084511F3CC010D4343503E1E5A67264B4367DAA9A3949499272E9B5022FDF040103DF050420201231DF0314A77CEDA094E2E764384B451B2AAC0C1F734B0BE5";
    String CAPK_input3 = "9F0605A0000099999F2201E3DF070101DF060101DF0270BC01E12223E1A41E88BFFA801093C5F8CEC5CD05DBBDBB787CE87249E8808327C2D218991F97A1131E8A25B0122ED11E709C533E8886A1259ADDFDCBB396604D24E505A2D0B5DD0384FB0002A7A1EB39BC8A11339C7A9433A948337761BE73BC497B8E58736DA4636538AD282D3CD3DBDF0403010001DF050420201231DF0314358F0F4F0EA6529920B93F842EB2482ED2F7F137";
    String CAPK_input4 = "9F0605A0000099999F2201E4DF070101DF060101DF028180CBF2E40F0836C9A5E390A37BE3B809BDF5D740CB1DA38CFC05D5F8D6B7745B5E9A3FA6961E55FF20412108525E66B970F902F7FF4305DD832CD0763E3AA8B8173F84777100B1047BD1D744509312A0932ED25FED52A959430768CCD902FD8C8AD9123E6ADDB3F34B92E7924D729CB6473533AE2B2B55BF0E44964FDEA8440117DF040103DF050420201231DF0314E9B0FAE14A832D5FB3783F7EF11FE6D3E4B059B1";
    String CAPK_input5 = "9F0605A0000099999F2201E5DF070101DF060101DF028180D4FDAE94DEDBECC6D20D38B01E91826DC6954338379917B2BB8A6B36B5D3B0C5EDA60B337448BAFFEBCC3ABDBA869E8DADEC6C870110C42F5AAB90A18F4F867F72E3386FFC7E67E7FF94EBA079E531B3CF329517E81C5DD9B3DC65DB5F9043190BE0BE897E5FE48ADF5D3BFA0585E076E554F26EC69814797F15669F4A255C13DF040103DF050420201231DF03146B5EFE581C0EE4D5F8DBE18BD656F33E80267855";
    String CAPK_input6 = "9F0605A0000099999F2201E6DF070101DF060101DF028180EBF9FAECC3E5C315709694664775D3FBDA5A504D89344DD920C55696E891D9AB622598A9D6AB8FBF35E4599CAB7EB22F956992F8AB2E6535DECB6B576FA0675F97C23DD4C374A66E6AF419C9D204D0B9F93C08D789D63805660FBB629DF1B488CFA1D7A13E9B729437EEAFE718EFA859348BA0D76812A99F31CD364F2A4FD42FDF0403010001DF050420201231DF0314D6646DFF64D2053EBB9E7C2D19A720A421CDC29D";
    String CAPK_input7 = "9F0605A0000000039F220196DF070101DF060101DF028180B74586D19A207BE6627C5B0AAFBC44A2ECF5A2942D3A26CE19C4FFAEEE920521868922E893E7838225A3947A2614796FB2C0628CE8C11E3825A56D3B1BBAEF783A5C6A81F36F8625395126FA983C5216D3166D48ACDE8A431212FF763A7F79D9EDB7FED76B485DE45BEB829A3D4730848A366D3324C3027032FF8D16A1E44D8DDF040103DF050420201231DF03147616E9AC8BE014AF88CA11A8FB17967B7394030E";
    String CAPK_input8 = "9F0605A0000000039F220150DF070101DF060101DF028180D11197590057B84196C2F4D11A8F3C05408F422A35D702F90106EA5B019BB28AE607AA9CDEBCD0D81A38D48C7EBB0062D287369EC0C42124246AC30D80CD602AB7238D51084DED4698162C59D25EAC1E66255B4DB2352526EF0982C3B8AD3D1CCE85B01DB5788E75E09F44BE7361366DEF9D1E1317B05E5D0FF5290F88A0DB47DF0403010001DF050420201231DF0314B769775668CACB5D22A647D1D993141EDAB7237B";
    String CAPK_input9 = "9F0605A0000000039F220151DF070101DF060101DF028190DB5FA29D1FDA8C1634B04DCCFF148ABEE63C772035C79851D3512107586E02A917F7C7E885E7C4A7D529710A145334CE67DC412CB1597B77AA2543B98D19CF2CB80C522BDBEA0F1B113FA2C86216C8C610A2D58F29CF3355CEB1BD3EF410D1EDD1F7AE0F16897979DE28C6EF293E0A19282BD1D793F1331523FC71A228800468C01A3653D14C6B4851A5C029478E757FDF040103DF050420201231DF0314B9D248075A3F23B522FE45573E04374DC4995D71";
    String CAPK_input10 = "9F0605A0000000039F220152DF070101DF060101DF0281B0AFF740F8DBE763F333A1013A43722055C8E22F41779E219B0E1C409D60AFD45C8789C57EECD71EA4A269A675916CC1C5E1A05A35BD745A79F94555CE29612AC9338769665B87C3CA8E1AC4957F9F61FA7BFFE4E17631E937837CABF43DD6183D6360A228A3EBC73A1D1CDC72BF09953C81203AB7E492148E4CB774CDDFAAC3544D0DD4F8C8A0E9C70B877EA79F2C22E4CE52C69F3EF376F61B0F43A540FE96C63F586310C3B6E39C78C4D647CADB5933DF040103DF050420201231DF031442D96E6E1217E5B59CC2079CE50C3D9F55B6FC1D";
    String CAPK_input11 = "9F0605A0000000039F220153DF070101DF060101DF0281F8BCD83721BE52CCCC4B6457321F22A7DC769F54EB8025913BE804D9EABBFA19B3D7C5D3CA658D768CAF57067EEC83C7E6E9F81D0586703ED9DDDADD20675D63424980B10EB364E81EB37DB40ED100344C928886FF4CCC37203EE6106D5B59D1AC102E2CD2D7AC17F4D96C398E5FD993ECB4FFDF79B17547FF9FA2AA8EEFD6CBDA124CBB17A0F8528146387135E226B005A474B9062FF264D2FF8EFA36814AA2950065B1B04C0A1AE9B2F69D4A4AA979D6CE95FEE9485ED0A03AEE9BD953E81CFD1EF6E814DFD3C2CE37AEFA38C1F9877371E91D6A5EB59FDEDF75D3325FA3CA66CDFBA0E57146CC789818FF06BE5FCC50ABD362AE4B80996DDF040103DF050420201231DF0314AC213A2E0D2C0CA35AD0201323536D58097E4E57";
    String CAPK_input12 = "9F0605A0000000039F220158DF070101DF060101DF0281C899552C4A1ECD68A0260157FC4151B5992837445D3FC57365CA5692C87BE358CDCDF2C92FB6837522842A48EB11CDFFE2FD91770C7221E4AF6207C2DE4004C7DEE1B6276DC62D52A87D2CD01FBF2DC4065DB52824D2A2167A06D19E6A0F781071CDB2DD314CB94441D8DC0E936317B77BF06F5177F6C5ABA3A3BC6AA30209C97260B7A1AD3A192C9B8CD1D153570AFCC87C3CD681D13E997FE33B3963A0A1C79772ACF991033E1B8397AD0341500E48A24770BC4CBE19D2CCF419504FDBF0389BC2F2FDCD4D44E61FDF0403010001DF050420201231DF0314753ED0AA23E4CD5ABD69EAE7904B684A34A57C22";
    String Term_input = "9F4005FF80F020019F3303E0D8C81F0107F4F0F0FCAFFEA09F66042440C0009F3501229A031804109F21030830009F1A0208401F0501011F0601011F0701011F0801011F090101";

    @Override
    public void onPointerCaptureChanged(boolean hasCapture) {

    }


    private class WorkHandler extends Handler {

        public static final int MSG_TEST_EMV = 1;
        public static final int MSG_PIN_BLOCK = 2;
        public static final int MSG_DUKPTPIN_BLOCK = 3;

        public WorkHandler(Looper looper) {
            super(looper);
        }

        @Override
        public void handleMessage(Message msg) {
            int what = msg.what;
            int ret;
            Log.e("TAG", "vpos*****************EmvEnvParaInit");

                switch (what) {
                    case MSG_TEST_EMV:
                        Log.e("TAG", "vpos*****************Start EMV test");
                        showMessage("wait card ");
                        int mCardType = -1;
                        byte cardtype[] = new byte[3];
                        byte serialNo[] = new byte[50];
                        byte ATR[] = new byte[40];
                        byte PaypassTagBuff[] = new byte[1024];
                        mPosApiHelper.SetEntryModeOpen();
                        final long time = System.currentTimeMillis();
                        Log.e("TAG", "vpos*****************wait card");
                        while (System.currentTimeMillis() < time + 30 * 1000) {
                            if (mThreadFinished) {
                                Log.e("TAG", "vpos*****************loop detecting bIsBack 11");
                                mPosApiHelper.SetEntryModeClose();
                                return;
                            }

                            mCardType = mPosApiHelper.EntryPoint();
                            Log.d(TAG, "vpos EntryPoint mCardType== " + mCardType);
                            if (mCardType >= 0) {
                                break;
                            }
                        }

                        if (mCardType < 0)  {
                            Log.e(TAG, "vpos*************loop detecting return ");
                            mPosApiHelper.SetEntryModeClose();
                            showMessage("Not detected card! ");
                            return;
                        }

                        Log.d(TAG, "*************loop detecting return 00");
                        mPosApiHelper.SetEntryModeClose();
                        Log.e(TAG, "*************vpos loop detecting return11 ");

                        if (mCardType == -1) {
                            showMessage("timeOut~");
                            return;

                        } else if (mCardType == 0) {

                            Log.d(TAG, "Mcrtest start00");
                            String McrData = "";
                            Arrays.fill(track1, (byte) 0x00);
                            Arrays.fill(track2, (byte) 0x00);
                            Arrays.fill(track3, (byte) 0x00);
                            Log.e(TAG, "Mcrtest start22");
                            ret = mPosApiHelper.McrRead((byte) 0, (byte) 0, track1, track2, track3);
                            Log.e(TAG, "Mcrtest start44=" + ret);
                            if (ret >= 0) {
                                if ((ret & 0x01) == 0x01) {
                                    McrData = "track1:" + new String(track1).trim();
                                }
                                if ((ret & 0x02) == 0x02) {
                                    McrData = McrData + "\n\ntrack2:" + new String(track2).trim();
                                }
                                if ((ret & 0x04) == 0x04) {
                                    McrData = McrData + "\n\ntrack3:" + new String(track3).trim();
                                }
                            } else {
                                McrData = "Lib_MsrRead check data error";
                            }
                            mPosApiHelper.McrClose();

                            showMessage("MCR:  " + McrData);

                            ///*******************-----EMV contact---******************************///
                        } else if (mCardType == 1) {

                            String Tag5A_data = "";
                            short TagCardNo = 0x5A;
                            int TagCardNo_len;
                            byte CardNoData[] = new byte[56];


                            mPosApiHelper.KeyPadInit(mKeypadLogo);
                            mPosApiHelper.SetKeyPadTime(20);


                            mPosApiHelper.EmvKernelInit();
                            mPosApiHelper.EmvSetTransType(1);
                            mPosApiHelper.EmvSetTransAmount(9879900);
                            mPosApiHelper.EmvSetCardType(1);

                            Log.d(TAG, "EMV TEST");

                            mPosApiHelper.SetKeyPadType(0);
                            ret = mPosApiHelper.EmvProcess(1, 0);  //The FLOWTYPE value is 1- simplifies the process
                            Log.d(TAG, "ret000 = " + ret);

                            if (ret < 0) {
                                showMessage("EMV Termination");
                                return;

                            } else if (ret == 3) {
                                Log.d(TAG, "EMV GOONLINE");
                            }

                            TagCardNo_len = mPosApiHelper.EmvGetTagData(CardNoData, 56, TagCardNo);

                            Log.d(TAG, "TagCardNo_len--::" + TagCardNo_len);
                            if (TagCardNo_len > 0) {
                                for (int i = 0; i < TagCardNo_len; i++) {
                                    Log.d(TAG, "i = " + i + "  " + CardNoData[i]);
                                    Tag5A_data += ByteUtil.byteToHexString(CardNoData[i] /*& 0xFF*/);
                                }

                                if (TagCardNo_len % 2 != 0) {
                                    Tag5A_data = Tag5A_data.substring(0, TagCardNo_len * 2 - 1);
                                }

                                final int bypass = mPosApiHelper.EmvPinbyPass();

                                showMessage("EMV GOONLINE" + "\nCardNO:" + Tag5A_data  );
                            } else {
                                Log.d(TAG, "Termination");
                                showMessage("EMV Termination");

                            }
                            Log.d(TAG, "EmvFinal");
                            mPosApiHelper.EmvFinal();


                            ///*******************----Contactless-Quics and PayWave---******************************///
                        } else if (mCardType == 3) {

                            Log.d(TAG, "paywaveunipay0000");
                            String Tag57_data = "";
                            String strEmvStatus = "";
                            short TagCardNo = 0x57;
                            int TagCardNo_len;
                            byte CardNoData[] = new byte[56];

                            mPosApiHelper.KeyPadInit(mKeypadLogo);
                            mPosApiHelper.SetKeyPadTime(20);  //set pinpad timeout is 20 seconds

                            mPosApiHelper.PayWaveSetTransType(0x00);
                            mPosApiHelper.PayWaveSetTransAmount(11000);

                            ret = mPosApiHelper.PayWaveTransProcess();

                            if (ret < 0) {
                                showMessage("Paywave Termination");
                                mPosApiHelper.PayWaveFinal();
                                return;

                            } else if (ret == 22) {
                                strEmvStatus = "Paywave GOONLINE";
                            } else if (ret == 101) {
                                strEmvStatus = "Paywave ACCEPTED_OFFLINE";
                            } else if (ret == 102) {
                                strEmvStatus = "Paywave DENIALED_OFFLINE";
                            }

                            TagCardNo_len = mPosApiHelper.PayWaveGetTagData(CardNoData, 56, TagCardNo);
                            Log.d(TAG, "TagCardNo_len : " + TagCardNo_len);
                            for (int i = 0; i < TagCardNo_len; i++) {
                                Log.d(TAG, "i = " + i + "  " + CardNoData[i]);
                                Tag57_data += ByteUtil.byteToHexString(CardNoData[i] /*& 0xFF*/);
                            }

                            if (TagCardNo_len % 2 != 0) {
                                Tag57_data = Tag57_data.substring(0, TagCardNo_len * 2 - 1);
                            }
                            Log.d(TAG, "-Tag57_data=----" + Tag57_data);


                            showMessage(strEmvStatus + "\n\nCardNO:" + Tag57_data);

                            mPosApiHelper.PayWaveFinal();


                            ///*******************---if (mCardType == 2) {---******************************///
                        } else if (mCardType == 2) {
                            Log.d(TAG, "Paypass Kernel Test");
                            int TagName = 0x5A; //PAN
                            String PaypssTag57_data = "";

                            int result = mPosApiHelper.PaypassTransaction();
                            Log.d(TAG, "Paypass PaypassTransaction ret->" + result);

                            int Data_len = mPosApiHelper.PaypassGetTagValue(PaypassTagBuff, 1024, TagName);
                            Log.d(TAG, "Paypass PaypassGetTagValue" + Data_len);

                            for (int i = 0; i < Data_len; i++) {
                                Log.d(TAG, "i = " + i + "  " + PaypassTagBuff[i]);
                                PaypssTag57_data += ByteUtil.byteToHexString(PaypassTagBuff[i] /*& 0xFF*/);
                            }

                            if (Data_len / 2 != 0) {
                                PaypssTag57_data = PaypssTag57_data.substring(0, Data_len * 2);
                            }

                            mPosApiHelper.PaypassFinal();

                            showMessage(PaypssTag57_data);

                        }

                        break;

                    case MSG_PIN_BLOCK:
                        Log.d(TAG, "PinBlock0 ");

                        int pinkey_n = 0;
                        int timeout_s = 12;
                        //  byte[] card_no = new byte[]{0x34,0x30, 0x30, 0x32, 0x32, 0x31, 0x32,  0x30, 0x30, 0x30, 0x30, 0x31,0x39,0x38,0x35,0x32}; //4002212000019852
                        byte[] card_no = new byte[]{0x32, 0x32, 0x30, 0x30, 0x32, 0x34, 0x30, 0x36, 0x39, 0x39, 0x33, 0x30, 0x31, 0x30, 0x36, 0x31};
                        byte[] mode = new byte[]{1};
                        byte[] pin_block = new byte[8];

                        ret = mPosApiHelper.EmvGetPinBlock(0, pinkey_n, card_no, mode, pin_block, timeout_s);
                        Log.d(TAG, "PinBlock0 EmvGetPinBlock ret=" + ret);

                        if (ret != 0) {
                            showMessage("Pin Block Test Failed");
                            return;
                        }

                        final String pin_block00 = ByteUtil.bytearrayToHexString(pin_block, pin_block.length);

                        Log.d(TAG, "PinBlock2 pin_block00=----" + pin_block00);

                        showMessage("PinBlock0 :" + pin_block00);

                        break;

                    case MSG_DUKPTPIN_BLOCK:
                        Log.d(TAG, "dukptPinBlock0 ");
                        int dukptpinkey_n = 2;
                        byte[] dukptcard_no = new byte[]{0x32, 0x32, 0x30, 0x30, 0x32, 0x34, 0x30, 0x36, 0x39, 0x39, 0x33, 0x30, 0x31, 0x30, 0x36, 0x31};
                        byte[] dukptmode = new byte[]{1};
                        byte[] dukptpin_block = new byte[8];
                        byte[] OutKsn = new byte[10];
                        byte[] PinKcv = new byte[3];
                        int timeout = 12;

                        ret = mPosApiHelper.EmvGetDukptPinblock(0, dukptpinkey_n, dukptcard_no, dukptpin_block, OutKsn, PinKcv, timeout);
                        Log.d(TAG, "dukptPinBlock0 EmvGetPinBlock ret=" + ret);
                        if (ret != 0) {
                            showMessage("dukptPin Block Test Failed");
                            return;
                        }

                        final String dukptpin_block00 = ByteUtil.bytearrayToHexString(dukptpin_block, dukptpin_block.length);
                        Log.d(TAG, "dukptPinBlock2 pin_block00=----" + dukptpin_block00);

                        final String ksn = ByteUtil.bytearrayToHexString(OutKsn, OutKsn.length);
                        Log.d(TAG, "dukptPinBlock2 OutKsn=----" + OutKsn);
                        showMessage("dukptPinBlock0 :" + dukptpin_block00 + "\r\nKsn:" + ksn);

                        break;

                    default:
                        break;
                }
        }
    }

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mContext = this;
        //无title
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        //全屏
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);

        setContentView(R.layout.activity_emv_lay);

        tvEmvMsg = (TextView) findViewById(R.id.tvEmvMsg);

        mTestEmvBtn = (Button)findViewById(R.id.btn_emv);
        mTestEmvBtn.setOnClickListener(this);

        mTestPinBlock = (Button)findViewById(R.id.btn_pinblock);
        mTestPinBlock.setOnClickListener(this);

        mTestDukptPinBlock = (Button)findViewById(R.id.btn_dukptpinblock);
        mTestDukptPinBlock.setOnClickListener(this);

        mKeypadLogo = BitmapFactory.decodeResource(getResources(),R.drawable.keypad_logo_sel);

        //star a thread for emv action
        mWorkThread = new HandlerThread("sdk_emv_thread");
        mWorkThread.start();
        mWorkHandler = new WorkHandler(mWorkThread.getLooper());

        mPosApiHelper.EmvEnvParaInit();
        mPosApiHelper.EmvClearAllCapks();
        mPosApiHelper.EmvClearAllAIDS();

        Log.e("TAG", "vpos*****************add parameter");
        mPosApiHelper.EmvAddOneCAPK(capk1buf, capk1buf.length);

        mPosApiHelper.EmvAddOneAIDS(test0, test0.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test1, test1.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test2, test2.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test3, test3.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test4, test4.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test5, test5.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test6, test6.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test7, test7.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test8, test8.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test9, test9.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test10, test10.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test11, test11.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test12, test12.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test13, test13.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test14, test14.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test15, test15.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test16, test16.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test17, test17.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test18, test18.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test19, test19.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(test20, test20.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);


        mPosApiHelper.EmvAddOneAIDS(Visaaid0, Visaaid0.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(VISAaid1, VISAaid1.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(MIRAID0, MIRAID0.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(MIRAID1, MIRAID1.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);


        mPosApiHelper.EmvAddOneAIDS(Master0, Master0.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(Master1, Master1.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(UnionPay_Debit, UnionPay_Debit.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        mPosApiHelper.EmvAddOneAIDS(UnionPay_Credit, UnionPay_Credit.length);
        mPosApiHelper.EmvSaveTermParas(TermParabuf, TermParabuf.length,0);

        //paypass
        mPosApiHelper.PaypassKernelInit();//---step 1
        //   mPosApiHelper.PaypassAidSet(Aid_input0);//---step 2
        mPosApiHelper.PaypassAidSet(PaypassAid_input);//
        mPosApiHelper.PaypassAidSet(Aid_inputT);//
        mPosApiHelper.PaypassCapkSet(Capk_input); //---step 3
        mPosApiHelper.PaypassCapkSet(Capk_input1); //---step 3
        mPosApiHelper.PaypassCapkSet(Capk_input2); //---step 3
        mPosApiHelper.PaypassReaderSet(Reader_input); //---step 4
        mPosApiHelper.PaypassKernelSet(Kernel_input); //---step 5
        mPosApiHelper.PaypassTransSet(Trans_input); //---step 6

        //paywave
        mPosApiHelper.PayWaveKernelInit();
        mPosApiHelper.PayWaveClearAllTerm();
        mPosApiHelper.PayWaveClearAllCapk();
        mPosApiHelper.PayWaveClearAllAIDS();
        mPosApiHelper.PayWaveAidSet(AID_input1);
        mPosApiHelper.PayWaveAidSet(AID_input2);
        mPosApiHelper.PayWaveAidSet(AID_input3);
        mPosApiHelper.PayWaveAidSet(AID_input4);
        mPosApiHelper.PayWaveAidSet(AID_input5);
        mPosApiHelper.PayWaveAidSet(AID_input6);
        mPosApiHelper.PayWaveCapkSet(CAPK_input1);
        mPosApiHelper.PayWaveCapkSet(CAPK_input2);
        mPosApiHelper.PayWaveCapkSet(CAPK_input3);
        mPosApiHelper.PayWaveCapkSet(CAPK_input4);
        mPosApiHelper.PayWaveCapkSet(CAPK_input5);
        mPosApiHelper.PayWaveCapkSet(CAPK_input6);
        mPosApiHelper.PayWaveCapkSet(CAPK_input7);
        mPosApiHelper.PayWaveCapkSet(CAPK_input8);
        mPosApiHelper.PayWaveCapkSet(CAPK_input9);
        mPosApiHelper.PayWaveCapkSet(CAPK_input10);
        mPosApiHelper.PayWaveCapkSet(CAPK_input11);
        mPosApiHelper.PayWaveCapkSet(CAPK_input12);
        mPosApiHelper.PayWaveTermSet(Term_input);
    }

    @Override
    protected void onResume() {
        //disable the power key
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        super.onResume();
        mPosApiHelper.InitPaySysKernel();

    }


    @Override
    protected void onPause() {
        //enable the power key
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        mThreadFinished = true;

        mWorkHandler.removeCallbacksAndMessages(null);
        mWorkThread.quitSafely();

        mPosApiHelper.UninitPaySysKernel();
    }

    public void onClick(View v) {

        switch (v.getId()){
            case R.id.btn_emv:
                mTestPinBlock.setClickable(false);
                mTestDukptPinBlock.setClickable(false);
                mWorkHandler.sendEmptyMessage(WorkHandler.MSG_TEST_EMV);
                break;
            case R.id.btn_pinblock:
                mTestEmvBtn.setClickable(false);
                mTestDukptPinBlock.setClickable(false);
                mWorkHandler.sendEmptyMessage(WorkHandler.MSG_PIN_BLOCK);
                break;

            case R.id.btn_dukptpinblock:
                mTestEmvBtn.setClickable(false);
                mTestPinBlock.setClickable(false);
                mWorkHandler.sendEmptyMessage(WorkHandler.MSG_DUKPTPIN_BLOCK);
                break;
        }
    }


   private void showMessage(final String msg){
       runOnUiThread(new Runnable() {
           public void run() {
               tvEmvMsg.setText(msg);
               mTestEmvBtn.setClickable(true);
               mTestPinBlock.setClickable(true);
               mTestDukptPinBlock.setClickable(true);
           }
       });
   }


}
