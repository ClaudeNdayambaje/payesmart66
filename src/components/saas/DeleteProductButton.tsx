import React, { useState } from 'react';
import { db } from '../../firebase';
import { doc, deleteDoc, getDoc } from 'firebase/firestore';
import { toast } from 'react-hot-toast';

interface DeleteProductButtonProps {
  productId: string;
  onSuccess?: () => void;
}

/**
 * Bouton de suppression d√©di√© pour les produits marketing
 * Utilise la m√™me m√©thode que le composant de test qui fonctionne correctement
 */
const DeleteProductButton: React.FC<DeleteProductButtonProps> = ({ productId, onSuccess }) => {
  const [isDeleting, setIsDeleting] = useState(false);

  const handleDelete = async (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (!productId || productId.trim() === '') {
      toast.error('ID de produit invalide');
      return;
    }

    if (window.confirm('√ätes-vous s√ªr de vouloir supprimer ce produit ? Cette action est irr√©versible.')) {
      try {
        setIsDeleting(true);
        const toastId = toast.loading('Suppression en cours...');
        
        console.log(`üóëÔ∏è Suppression du produit d√©marr√©e, ID: ${productId}`);
        
        try {
          // V√©rifier si le produit existe
          console.log(`üîç V√©rification de l'existence du document...`);
          const productRef = doc(db, 'produits', productId);
          const productSnap = await getDoc(productRef);
          
          if (!productSnap.exists()) {
            console.log(`‚ö†Ô∏è Le produit avec l'ID ${productId} n'existe pas`);
            toast.error(`Le produit n'existe pas`, { id: toastId });
            setIsDeleting(false);
            return;
          }
          
          // Produit trouv√©, proc√©der √† la suppression
          const productData = productSnap.data();
          console.log(`‚úÖ Produit trouv√©: ${JSON.stringify(productData?.name || 'Sans nom')}`);
          
          // Suppression directe avec Firestore
          console.log(`‚ö° Ex√©cution de la commande deleteDoc...`);
          await deleteDoc(productRef);
          
          // V√©rification post-suppression
          const checkSnap = await getDoc(productRef);
          
          if (!checkSnap.exists()) {
            console.log(`üéâ Produit supprim√© avec succ√®s!`);
            toast.success('Produit supprim√© avec succ√®s', { id: toastId });
            
            // Appeler le callback de r√©ussite si fourni
            if (onSuccess) {
              onSuccess();
            }
          } else {
            console.log(`‚ùå Le produit existe encore apr√®s la suppression`);
            toast.error('√âchec de la suppression - le produit existe toujours', { id: toastId });
          }
        } catch (err) {
          console.error('‚ùå Erreur lors de la suppression:', err);
          toast.error(`Erreur lors de la suppression: ${err instanceof Error ? err.message : 'Erreur inconnue'}`, { id: toastId });
        } finally {
          setIsDeleting(false);
        }
      } catch (err) {
        console.error('‚ùå Exception g√©n√©rale:', err);
        toast.error(`Erreur: ${err instanceof Error ? err.message : 'Erreur inconnue'}`);
        setIsDeleting(false);
      }
    }
  };

  return (
    <button
      onClick={handleDelete}
      disabled={isDeleting}
      className={`text-white font-bold px-4 py-2 rounded shadow ${
        isDeleting 
          ? 'bg-red-300 cursor-not-allowed' 
          : 'bg-red-500 hover:bg-red-700'
      }`}
      type="button"
      aria-label="Supprimer le produit"
    >
      {isDeleting ? 'Suppression...' : 'Supprimer'}
    </button>
  );
};

export default DeleteProductButton;
