import { db } from '../firebase';
import { addDoc, collection, deleteDoc, doc, getDoc, getDocs, limit, query, serverTimestamp, updateDoc, where } from 'firebase/firestore';
import { Client } from '../types/saas';
import { getClientSubscriptions } from './subscriptionService';
import { getClientPayments } from './paymentService';

// Collection Firestore
const CLIENTS_COLLECTION = 'businesses';

// Fonction de mappage de document business vers Client
const mapBusinessToClient = (docId: string, data: any): Client => {
  return {
    id: docId,
    businessName: data.name || '',
    contactName: data.owner || '',
    email: data.email || '',
    phone: data.phone || '',
    address: data.address || '',
    city: data.city || '',
    postalCode: data.postalCode || '',
    country: data.country || '',
    createdAt: data.createdAt || Date.now(),
    status: data.status || 'active',
    notes: data.notes || '',
    businessId: docId,
    trialStartDate: data.trialStartDate,
    trialEndDate: data.trialEndDate,
    isInTrial: data.isInTrial || false,
    deleted: data.deleted || false,
    deletedAt: data.deletedAt
  };
};

// Obtenir tous les clients
export const getClients = async (): Promise<Client[]> => {
  try {
    console.log('R√©cup√©ration des clients depuis la collection businesses');
    const clientsQuery = query(
      collection(db, CLIENTS_COLLECTION)
      // Pas d'orderBy pour l'instant car le champ peut ne pas exister
    );
    
    const snapshot = await getDocs(clientsQuery);
    const clients = snapshot.docs.map(doc => mapBusinessToClient(doc.id, doc.data()));
    console.log(`${clients.length} clients r√©cup√©r√©s depuis businesses`);
    return clients;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des clients:', error);
    throw error;
  }
};

// Obtenir un client par ID
export const getClientById = async (clientId: string): Promise<Client | null> => {
  try {
    const clientDoc = await getDoc(doc(db, CLIENTS_COLLECTION, clientId));
    
    if (clientDoc.exists()) {
      return mapBusinessToClient(clientDoc.id, clientDoc.data());
    }
    
    return null;
  } catch (error) {
    console.error(`Erreur lors de la r√©cup√©ration du client ${clientId}:`, error);
    throw error;
  }
};

// Ajouter un nouveau client
export const addClient = async (clientData: Omit<Client, 'id'>): Promise<Client> => {
  try {
    // Transformer les donn√©es Client en format Business
    const businessData = {
      name: clientData.businessName,
      owner: clientData.contactName,
      email: clientData.email,
      phone: clientData.phone,
      address: clientData.address,
      city: clientData.city,
      postalCode: clientData.postalCode,
      country: clientData.country,
      createdAt: Date.now(),
      status: clientData.status || 'active',
      notes: clientData.notes,
      isInTrial: clientData.isInTrial || false,
      trialStartDate: clientData.trialStartDate,
      trialEndDate: clientData.trialEndDate,
      currency: 'EUR',
      language: 'fr',
      timezone: 'Europe/Paris'
    };
    
    const docRef = await addDoc(collection(db, CLIENTS_COLLECTION), businessData);
    
    return mapBusinessToClient(docRef.id, businessData);
  } catch (error) {
    console.error('Erreur lors de l\'ajout du client:', error);
    throw error;
  }
};

// Mettre √† jour un client
export const updateClient = async (clientId: string, clientData: Partial<Client>): Promise<void> => {
  try {
    // Transformer les donn√©es Client en format Business
    const businessData: Record<string, any> = {};
    
    if (clientData.businessName) businessData.name = clientData.businessName;
    if (clientData.contactName) businessData.owner = clientData.contactName;
    if (clientData.email) businessData.email = clientData.email;
    if (clientData.phone) businessData.phone = clientData.phone;
    if (clientData.address) businessData.address = clientData.address;
    if (clientData.city) businessData.city = clientData.city;
    if (clientData.postalCode) businessData.postalCode = clientData.postalCode;
    if (clientData.country) businessData.country = clientData.country;
    if (clientData.status) businessData.status = clientData.status;
    if (clientData.notes) businessData.notes = clientData.notes;
    if (clientData.isInTrial !== undefined) businessData.isInTrial = clientData.isInTrial;
    if (clientData.trialStartDate) businessData.trialStartDate = clientData.trialStartDate;
    if (clientData.trialEndDate) businessData.trialEndDate = clientData.trialEndDate;
    if (clientData.deleted !== undefined) businessData.deleted = clientData.deleted;
    if (clientData.deletedAt) businessData.deletedAt = clientData.deletedAt;
    
    await updateDoc(doc(db, CLIENTS_COLLECTION, clientId), businessData);
  } catch (error) {
    console.error(`Erreur lors de la mise √† jour du client ${clientId}:`, error);
    throw error;
  }
};

// Suppression simple d'un client (conserve les donn√©es li√©es)
export const deleteClient = async (clientId: string): Promise<void> => {
  try {
    // Plut√¥t que de supprimer compl√®tement, marquer comme supprim√©
    await updateDoc(doc(db, CLIENTS_COLLECTION, clientId), {
      deleted: true,
      deletedAt: Date.now(),
      status: 'DELETED'
    });
  } catch (error) {
    console.error(`Erreur lors de la suppression du client ${clientId}:`, error);
    throw error;
  }
};

// V√©rifier si un document existe dans Firestore
const doesDocumentExist = async (collection: string, documentId: string): Promise<boolean> => {
  try {
    const docRef = doc(db, collection, documentId);
    const docSnap = await getDoc(docRef);
    return docSnap.exists();
  } catch (error) {
    console.error(`Erreur lors de la v√©rification de l'existence du document ${documentId}:`, error);
    return false;
  }
};

// V√©rifier si un client a des r√©f√©rences qui emp√™chent sa suppression directe
const checkClientReferences = async (clientId: string): Promise<string[]> => {
  const references: string[] = [];
  
  try {
    // V√©rifier les abonnements sans utiliser d'index
    const subscriptionsSnapshot = await getDocs(
      query(collection(db, 'subscriptions'), where('clientId', '==', clientId), limit(1))
    );
    if (!subscriptionsSnapshot.empty) {
      references.push('subscriptions');
    }
    
    // V√©rifier les paiements sans utiliser d'index
    const paymentsSnapshot = await getDocs(
      query(collection(db, 'payments'), where('clientId', '==', clientId), limit(1))
    );
    if (!paymentsSnapshot.empty) {
      references.push('payments');
    }
    
    // Ajouter d'autres v√©rifications si n√©cessaire...
    
  } catch (error) {
    console.error(`Erreur lors de la v√©rification des r√©f√©rences du client ${clientId}:`, error);
  }
  
  return references;
};

// Suppression compl√®te d'un client et de toutes ses donn√©es associ√©es
export const deleteClientComplete = async (clientId: string, businessId: string): Promise<boolean> => {
  console.log(`üóëÔ∏è D√©marrage de la suppression compl√®te du client ${clientId}...`);
  
  // Cr√©er une liste des entit√©s qui ont √©t√© supprim√©es avec succ√®s
  const successfullyDeletedEntities: string[] = [];
  let clientUpdated = false;
  
  try {
    // V√©rifier s'il y a des r√©f√©rences qui emp√™cheraient la suppression directe
    const references = await checkClientReferences(clientId);
    if (references.length > 0) {
      console.log(`‚ö†Ô∏è Le client a des r√©f√©rences dans: ${references.join(', ')}. Suppression des r√©f√©rences d'abord...`);
    }
    
    // 3. Tenter de supprimer les abonnements li√©s en premier
    try {
      console.log(`üîç Recherche des abonnements du client ${clientId}...`);
      const subscriptions = await getClientSubscriptions(clientId);
      console.log(`‚úÖ ${subscriptions.length} abonnements trouv√©s.`);
      
      // Supprimer chaque abonnement individuellement pour √©viter que l'un ne fasse √©chouer les autres
      for (const subscription of subscriptions) {
        try {
          await deleteDoc(doc(db, 'subscriptions', subscription.id));
          successfullyDeletedEntities.push(`Abonnement ${subscription.id}`);
        } catch (subError) {
          console.error(`‚ùå Erreur lors de la suppression de l'abonnement ${subscription.id}:`, subError);
          // Essayer de mettre √† jour l'abonnement pour supprimer la r√©f√©rence au client
          try {
            await updateDoc(doc(db, 'subscriptions', subscription.id), {
              clientId: "DELETED_CLIENT",
              status: "DELETED"
            });
            console.log(`‚úÖ Abonnement ${subscription.id} marqu√© comme supprim√©.`);
            successfullyDeletedEntities.push(`Abonnement d√©tag√© ${subscription.id}`);
          } catch (updateError) {
            console.error(`‚ùå Impossible de mettre √† jour l'abonnement ${subscription.id}:`, updateError);
          }
        }
      }
      console.log(`‚úÖ Abonnements trait√©s.`);
    } catch (subsError) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration des abonnements:`, subsError);
    }
    
    // 4. Tenter de supprimer les paiements li√©s
    try {
      console.log(`üîç Recherche des paiements du client ${clientId}...`);
      const payments = await getClientPayments(clientId);
      console.log(`‚úÖ ${payments.length} paiements trouv√©s.`);
      
      // Supprimer chaque paiement individuellement
      for (const payment of payments) {
        try {
          await deleteDoc(doc(db, 'payments', payment.id));
          successfullyDeletedEntities.push(`Paiement ${payment.id}`);
        } catch (payError) {
          console.error(`‚ùå Erreur lors de la suppression du paiement ${payment.id}:`, payError);
          // Essayer de mettre √† jour le paiement pour supprimer la r√©f√©rence au client
          try {
            await updateDoc(doc(db, 'payments', payment.id), {
              clientId: "DELETED_CLIENT",
              status: "DELETED"
            });
            console.log(`‚úÖ Paiement ${payment.id} marqu√© comme supprim√©.`);
            successfullyDeletedEntities.push(`Paiement d√©tag√© ${payment.id}`);
          } catch (updateError) {
            console.error(`‚ùå Impossible de mettre √† jour le paiement ${payment.id}:`, updateError);
          }
        }
      }
      console.log(`‚úÖ Paiements trait√©s.`);
    } catch (paymentsError) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration des paiements:`, paymentsError);
    }
    
    // 1. Essayer de supprimer directement le client maintenant que les r√©f√©rences sont trait√©es
    try {
      console.log(`üî• Suppression directe du client ${clientId}...`);
      await deleteDoc(doc(db, CLIENTS_COLLECTION, clientId));
      successfullyDeletedEntities.push(`Client ${clientId}`);
      console.log(`‚úÖ Client ${clientId} supprim√© avec succ√®s.`);
    } catch (clientError: any) {
      console.error(`‚ùå Erreur lors de la suppression du client ${clientId}:`, clientError);
      
      // Si l'erreur est "failed-precondition", essayer de d√©tacher le client en le mettant √† jour
      if (clientError?.code === "failed-precondition") {
        console.log(`‚ö†Ô∏è Erreur de pr√©condition, tentative de mise √† jour du client pour le marquer comme supprim√©...`);
        try {
          // Mettre √† jour le client pour le marquer comme supprim√©
          await updateDoc(doc(db, CLIENTS_COLLECTION, clientId), {
            email: `DELETED_${clientId}@deleted.com`,
            name: "COMPTE SUPPRIM√â",
            surname: "",
            businessId: "",
            status: "DELETED",
            deleted: true,
            deletedAt: serverTimestamp()
          });
          clientUpdated = true;
          console.log(`‚úÖ Client ${clientId} marqu√© comme supprim√©.`);
          successfullyDeletedEntities.push(`Client d√©sactiv√© ${clientId}`);
        } catch (updateError) {
          console.error(`‚ùå Erreur lors de la mise √† jour du client ${clientId}:`, updateError);
        }
      }
    }
    
    // 2. Essayer de supprimer l'entreprise li√©e si elle existe
    if (businessId) {
      try {
        // V√©rifier d'abord s'il y a d'autres clients utilisant cette entreprise
        const clientsWithBusiness = await getDocs(
          query(collection(db, CLIENTS_COLLECTION), 
                where('businessId', '==', businessId),
                where('deleted', '==', false),
                limit(2))
        );
        
        // Ne supprimer l'entreprise que si ce client √©tait le seul √† l'utiliser
        const shouldDeleteBusiness = clientsWithBusiness.size <= 1 || 
                                    (clientsWithBusiness.size === 1 && 
                                     clientsWithBusiness.docs[0].id === clientId);
        
        if (shouldDeleteBusiness) {
          console.log(`üî• Suppression de l'entreprise ${businessId}...`);
          await deleteDoc(doc(db, 'businesses', businessId));
          successfullyDeletedEntities.push(`Entreprise ${businessId}`);
          console.log(`‚úÖ Entreprise ${businessId} supprim√©e avec succ√®s.`);
          
          // 5. Tenter de supprimer les donn√©es li√©es √† l'entreprise
          // Supprimer les employ√©s
          try {
            const employeesQuery = query(collection(db, 'employees'), where('businessId', '==', businessId));
            const employeesSnapshot = await getDocs(employeesQuery);
            console.log(`‚úÖ ${employeesSnapshot.size} employ√©s trouv√©s.`);
            
            for (const employeeDoc of employeesSnapshot.docs) {
              try {
                await deleteDoc(doc(db, 'employees', employeeDoc.id));
                successfullyDeletedEntities.push(`Employ√© ${employeeDoc.id}`);
              } catch (empError) {
                console.error(`‚ùå Erreur lors de la suppression de l'employ√© ${employeeDoc.id}:`, empError);
              }
            }
          } catch (empQueryError) {
            console.error(`‚ùå Erreur lors de la recherche des employ√©s:`, empQueryError);
          }
          
          // Supprimer les produits, cat√©gories et ventes uniquement si l'entreprise a √©t√© supprim√©e
          try {
            await Promise.allSettled([
              // Supprimer les produits
              getDocs(query(collection(db, 'products'), where('businessId', '==', businessId)))
                .then(snapshot => Promise.allSettled(
                  snapshot.docs.map(doc => deleteDoc(doc.ref))
                )),
              // Supprimer les cat√©gories
              getDocs(query(collection(db, 'categories'), where('businessId', '==', businessId)))
                .then(snapshot => Promise.allSettled(
                  snapshot.docs.map(doc => deleteDoc(doc.ref))
                )),
              // Supprimer les ventes
              getDocs(query(collection(db, 'sales'), where('businessId', '==', businessId)))
                .then(snapshot => Promise.allSettled(
                  snapshot.docs.map(doc => deleteDoc(doc.ref))
                ))
            ]);
            console.log(`‚úÖ Traitement des produits, cat√©gories et ventes termin√©.`);
          } catch (otherDataError) {
            console.error(`‚ùå Erreur lors de la suppression des donn√©es associ√©es √† l'entreprise:`, otherDataError);
          }
        } else {
          console.log(`‚ö†Ô∏è L'entreprise ${businessId} est utilis√©e par d'autres clients actifs, elle ne sera pas supprim√©e.`);
        }
      } catch (businessError) {
        console.error(`‚ùå Erreur lors de la suppression de l'entreprise ${businessId}:`, businessError);
      }
    }
    
    // V√©rifier si le client existe toujours et s'il n'a pas √©t√© mis √† jour
    const clientStillExists = await doesDocumentExist(CLIENTS_COLLECTION, clientId);
    if (clientStillExists && !clientUpdated) {
      console.warn(`‚ö†Ô∏è Le client existe toujours et n'a pas √©t√© marqu√© comme supprim√©. Derni√®re tentative...`);
      try {
        // Derni√®re tentative: marquer simplement comme supprim√©
        await updateDoc(doc(db, CLIENTS_COLLECTION, clientId), {
          deleted: true,
          deletedAt: serverTimestamp(),
          status: "DELETED"
        });
        successfullyDeletedEntities.push(`Client d√©sactiv√© ${clientId}`);
        console.log(`‚úÖ Client marqu√© comme supprim√© avec succ√®s.`);
      } catch (finalError) {
        console.error(`‚ùå Erreur lors de la derni√®re tentative de marquer le client comme supprim√©:`, finalError);
      }
    }
    
    // Terminer avec un r√©sum√© des √©l√©ments supprim√©s
    console.log(`‚úÖ Op√©ration termin√©e. ${successfullyDeletedEntities.length} √©l√©ments trait√©s.`);
    
    // Consid√©rer la suppression r√©ussie si le client a √©t√© supprim√© ou marqu√© comme supprim√©
    const success = successfullyDeletedEntities.some(entity => 
      entity.includes(`Client ${clientId}`) || entity.includes(`Client d√©sactiv√© ${clientId}`));
    
    return success;
  } catch (error) {
    console.error(`‚ùå Erreur g√©n√©rale lors de la suppression compl√®te du client ${clientId}:`, error);
    
    // M√™me en cas d'erreur g√©n√©rale, consid√©rer la suppression r√©ussie si le client a √©t√© supprim√© ou marqu√© comme tel
    return successfullyDeletedEntities.some(entity => 
      entity.includes(`Client ${clientId}`) || entity.includes(`Client d√©sactiv√© ${clientId}`));
  }
};

// Rechercher des clients
export const searchClients = async (searchTerm: string): Promise<Client[]> => {
  try {
    // Base de recherche : tous les clients (sauf supprim√©s)
    const allClients = await getClients();
    const activeClients = allClients.filter(client => !client.deleted);
    
    // Filtrer les clients qui correspondent au terme de recherche
    if (!searchTerm.trim()) return activeClients;
    
    const searchTermLower = searchTerm.toLowerCase().trim();
    
    return activeClients.filter(client => {
      return (
        client.businessName.toLowerCase().includes(searchTermLower) ||
        client.contactName.toLowerCase().includes(searchTermLower) ||
        client.email.toLowerCase().includes(searchTermLower) ||
        client.phone.includes(searchTermLower)
      );
    });
  } catch (error) {
    console.error('Erreur lors de la recherche de clients:', error);
    throw error;
  }
};
