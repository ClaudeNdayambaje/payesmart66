import { getFunctions, httpsCallable } from 'firebase/functions';
import { nanoid } from 'nanoid';
import { auth } from '../firebase';
import { getIdToken } from 'firebase/auth';

export interface VideoUploadResult {
  success: boolean;
  videoUrl?: string;
  error?: string;
  debugInfo?: any;
  metadata?: {
    duration?: number;
    width?: number;
    height?: number;
    size?: number;
  };
}

/**
 * Upload une vid√©o de produit via Cloud Function
 * Approche similaire au service d'images qui fonctionne correctement
 */
export const uploadProductVideoViaCloud = async (file: File, options?: {
  onProgress?: (progress: number) => void;
}): Promise<VideoUploadResult> => {
  console.log('üöÄ D√©marrage upload vid√©o via Cloud Function...');
  console.log('üìÅ Informations sur le fichier:', {
    name: file.name,
    type: file.type,
    size: `${(file.size / (1024 * 1024)).toFixed(2)} MB`
  });

  const { onProgress } = options || {};
  
  try {
    // V√©rification de l'authentification
    const currentUser = auth.currentUser;
    if (!currentUser) {
      console.error('‚ùå Utilisateur non authentifi√©');
      return {
        success: false,
        error: "Vous devez √™tre connect√© pour t√©l√©charger des vid√©os"
      };
    }
    
    console.log('üë§ Utilisateur authentifi√©:', currentUser.email);
    
    // Rafra√Æchissement du token pour garantir qu'il est valide
    try {
      const idToken = await getIdToken(currentUser, true);
      console.log('‚úÖ Token d\'authentification actualis√© avec succ√®s');
    } catch (tokenError) {
      console.error('‚ùå Impossible de rafra√Æchir le token:', tokenError);
      return {
        success: false,
        error: "Probl√®me d'authentification. Veuillez vous reconnecter."
      };
    }
    
    // Petit d√©lai pour s'assurer que Firebase est bien initialis√©
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('üë§ D√©marrage de l\'upload vid√©o avec authentification v√©rifi√©e');
    if (onProgress) onProgress(10);
    
    // --- √âTAPE 1: VALIDATION DU FICHIER ---
    
    // Validation de taille
    const MAX_SIZE = 50 * 1024 * 1024; // 50MB
    if (file.size > MAX_SIZE) {
      const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
      return {
        success: false,
        error: `Vid√©o trop volumineuse: ${sizeMB}MB (maximum: 50MB)`
      };
    }
    
    // Validation du type
    if (!file.type.startsWith('video/')) {
      return {
        success: false,
        error: `Format de fichier non support√©: ${file.type}. Seuls les formats vid√©o sont accept√©s.`
      };
    }
    
    if (onProgress) onProgress(20);
    
    // --- √âTAPE 2: CONVERSION EN BASE64 ---
    
    console.log('üìù Conversion du fichier en base64...');
    
    // Conversion du fichier en Base64
    const reader = new FileReader();
    const base64Data = await new Promise<string>((resolve, reject) => {
      reader.onload = (e) => {
        if (!e.target || typeof e.target.result !== 'string') {
          reject(new Error('√âchec de lecture du fichier'));
          return;
        }
        resolve(e.target.result);
      };
      reader.onerror = () => reject(new Error('√âchec de lecture du fichier'));
      reader.readAsDataURL(file);
    });
    
    console.log('‚úÖ Vid√©o convertie avec succ√®s en base64');
    if (onProgress) onProgress(40);
    
    // --- √âTAPE 3: PR√âPARATION DES DONN√âES ---
    
    // G√©n√©ration du nom de fichier
    const randomId = nanoid(8);
    const extension = file.name.split('.').pop()?.toLowerCase() || 'mp4';
    const fileName = `video_${randomId}.${extension}`;
    const folderPath = 'products/videos';
    
    console.log('‚òÅÔ∏è Appel de la Cloud Function uploadVideoToFirestore...');
    
    // Initialisation de la fonction Cloud avec r√©gion
    const functions = getFunctions(undefined, 'us-central1');
    console.log('‚úÖ Firebase Functions initialis√© avec r√©gion us-central1');
    
    // R√©cup√©ration de la fonction uploadVideoToFirestore
    const uploadVideoFunction = httpsCallable(functions, 'uploadVideoToFirestore');
    console.log('‚úÖ Fonction uploadVideoToFirestore r√©cup√©r√©e, pr√™t √† appeler');
    
    if (onProgress) onProgress(60);
    
    // R√©cup√©ration explicite du token d'authentification
    const idToken = await getIdToken(currentUser, true);
    console.log('üîë Token d\'authentification obtenu et sera envoy√© avec la requ√™te');
    
    // Pr√©parer les donn√©es avec token d'auth explicite
    const requestData = {
      imageBase64: base64Data,
      fileName: fileName,
      folder: folderPath,
      authToken: idToken,  // Transmission explicite du token
      userEmail: currentUser.email // Information suppl√©mentaire pour debug
    };
    
    console.log('üì£ Envoi des donn√©es √† la Cloud Function...');
    
    // Appel de la fonction Cloud avec gestion de la progression
    if (onProgress) onProgress(75);
    
    console.log('üí¨ Donn√©es envoy√©es √† la fonction Cloud:', {
      fileName,
      folder: folderPath,
      imageSize: `${(base64Data.length / (1024 * 1024)).toFixed(2)} MB (base64)`
    });
    
    // Appel de la fonction Cloud
    const response = await uploadVideoFunction(requestData);
    const responseData = response.data as any;
    
    console.log('‚úÖ R√©ponse de la Cloud Function:', responseData);
    if (onProgress) onProgress(100);
    
    // V√©rification de la r√©ponse
    if (responseData && responseData.success && responseData.videoUrl) {
      return {
        success: true,
        videoUrl: responseData.videoUrl,
        metadata: {
          size: file.size
        }
      };
    } else {
      throw new Error(responseData?.error || 'R√©ponse invalide de la fonction Cloud');
    }
    
  } catch (error: any) {
    console.error('‚ùå Erreur d√©taill√©e:', error);
    
    // Gestion des erreurs avec messages personnalis√©s
    let errorMessage = error.message || "Erreur inconnue lors de l'upload";
    
    // Messages personnalis√©s selon le type d'erreur
    if (error.code === 'functions/unauthenticated') {
      errorMessage = "Vous n'√™tes pas authentifi√© pour cette op√©ration";
    } else if (error.code === 'functions/invalid-argument') {
      errorMessage = "Donn√©es invalides pour l'upload de la vid√©o";
    } else if (error.code === 'functions/internal') {
      errorMessage = "Erreur serveur lors du traitement de la vid√©o";
    }
    
    return {
      success: false,
      error: errorMessage,
      debugInfo: {
        code: error.code,
        message: error.message,
        details: error.details,
        stack: error.stack
      }
    };
  }
};
