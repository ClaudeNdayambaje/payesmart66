import { storage, auth } from '../firebase';
import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';
import { nanoid } from 'nanoid';
import { analyzeFile } from '../utils/debugUtils';

/**
 * Service pour g√©rer le t√©l√©chargement des fichiers vers Firebase Storage
 */

/**
 * T√©l√©charge un fichier vers Firebase Storage
 * @param file - Le fichier √† t√©l√©charger
 * @param storagePath - Le chemin de destination dans Firebase Storage
 * @param onProgress - Fonction de callback pour suivre la progression
 * @returns Promise avec l'URL du fichier t√©l√©charg√©
 */

/**
 * V√©rifie si le navigateur est connect√© √† Internet
 * @returns true si connect√©, false sinon
 */
const isOnline = (): boolean => {
  return navigator.onLine;
};

export const uploadFileToStorage = async (
  file: File,
  storagePath: string,
  onProgress?: (progress: number) => void
): Promise<string> => {
  // V√©rifier la connectivit√© r√©seau
  if (!isOnline()) {
    console.error('‚ùå Pas de connexion Internet d√©tect√©e');
    throw new Error('Pas de connexion Internet. Veuillez v√©rifier votre connexion et r√©essayer.');
  }
  
  // Utiliser directement le fichier sans compression
  const fileToUpload = file;
  console.log(`üì§ Upload direct du fichier: ${(file.size / 1024).toFixed(1)}KB`);
  // Variables pour les tentatives
  let retryCount = 0;
  const maxRetries = 3;
  
  // S'assurer que le fichier existe et est valide
  if (!fileToUpload || fileToUpload.size === 0) {
    console.error('Fichier invalide ou vide');
    throw new Error('Le fichier est invalide ou vide');
  }
  
  // Analyser le fichier pour d√©tecter des probl√®mes potentiels
  const fileAnalysis = analyzeFile(fileToUpload);
  const fileSizeMB = fileToUpload.size / (1024 * 1024);
  console.log(`üì§ D√©but d'upload : ${fileToUpload.name} (${fileToUpload.type}, ${fileSizeMB.toFixed(2)} MB) vers ${storagePath}`);
  
  // Afficher les probl√®mes potentiels
  if (fileAnalysis.potentialIssues.length > 0) {
    console.warn('‚ö†Ô∏è Probl√®mes potentiels d√©tect√©s avec le fichier:');
    fileAnalysis.potentialIssues.forEach(issue => console.warn(`   - ${issue}`));
  }
  
  // V√©rifier les quotas de taille Firebase (limites communes)
  if (fileSizeMB > 100) {
    throw new Error(`Le fichier est trop volumineux (${fileSizeMB.toFixed(1)} MB). Firebase Storage a une limite de 100MB par fichier.`);
  }
  
  // Tentative d'upload avec plusieurs approches
  const tryMultipleUploadMethods = async (): Promise<string> => {
    // V√©rifier si un utilisateur est connect√© (obligatoire pour Firebase Storage)
    if (!auth.currentUser) {
      console.log('‚ö†Ô∏è Aucun utilisateur authentifi√©. Un compte utilisateur est requis pour l\'upload.');
      throw new Error('Vous devez √™tre connect√© pour t√©l√©charger des fichiers. Veuillez vous reconnecter.');
    } else if (auth.currentUser && auth.currentUser.uid) {
      console.log('üë§ Utilisateur d√©j√† authentifi√©:', auth.currentUser.uid);
    } else {
      console.log('‚ö†Ô∏è √âtat d\'authentification ind√©termin√©');
    }
    
    // G√©n√©rer un nom de fichier unique pour √©viter les conflits
    const timestamp = Date.now();
    const uniqueId = nanoid(8);
    const fileExtension = fileToUpload.name.split('.').pop() || 'file';
    const fileName = `${timestamp}-${uniqueId}.${fileExtension}`;
    
    // Simplifier la structure des chemins de stockage
    const cleanPath = storagePath.replace(/^\//g, '').replace(/\/$/, '');
    // Utiliser un chemin direct sans sous-dossiers de date
    const fullPath = `${cleanPath}/${fileName}`;
    console.log(`üìÇ Chemin de stockage: ${fullPath}`);
    const storageRef = ref(storage, fullPath);
    
    // Forcer un court d√©lai pour s'assurer que Firebase est pr√™t
    await new Promise(resolve => setTimeout(resolve, 500));
    
    try {
      // Pr√©f√©rer directement uploadBytesResumable car plus stable
      console.log('üîÑ Tentative d\'upload direct via uploadBytesResumable...');
      const uploadTask = uploadBytesResumable(storageRef, fileToUpload);
      
      return new Promise<string>((resolve, reject) => {
        uploadTask.on(
          'state_changed',
          (snapshot) => {
            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
            console.log(`üìà Progression: ${progress.toFixed(1)}%`);
            if (onProgress) onProgress(progress);
          },
          (error) => {
            console.error('‚ùå √âchec de l\'upload direct:', error);
            reject(error);
          },
          async () => {
            try {
              const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
              console.log('‚úÖ T√©l√©chargement r√©ussi:', downloadURL);
              resolve(downloadURL);
            } catch (error) {
              console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'URL:', error);
              reject(error);
            }
          }
        );
      });
    } catch (error1) {
      console.error('‚ùå √âchec de l\'upload via Base64:', error1);
      
      try {
        // M√©thode 2: Essayer uploadBytesResumable comme fallback
        console.log('üîÑ Tentative d\'upload via uploadBytesResumable...');
        const uploadTask = uploadBytesResumable(storageRef, fileToUpload);
        
        return new Promise<string>((resolve, reject) => {
          uploadTask.on(
            'state_changed',
            (snapshot) => {
              const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
              console.log(`üìä Progression: ${progress.toFixed(1)}%`);
              if (onProgress) onProgress(progress);
            },
            (error) => {
              console.error('‚ùå √âchec de l\'upload via uploadBytesResumable:', error);
              reject(error);
            },
            async () => {
              try {
                const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                console.log('‚úÖ T√©l√©chargement r√©ussi via uploadBytesResumable:', downloadURL);
                resolve(downloadURL);
              } catch (error) {
                console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'URL:', error);
                reject(error);
              }
            }
          );
        });
      } catch (error2) {
        console.error('‚ùå √âchecs de toutes les m√©thodes d\'upload:', error1, error2);
        throw new Error(`√âchec de t√©l√©chargement de l'image: ${error2 instanceof Error ? error2.message : 'Erreur inconnue'}`);
      }
    }
  };

  // Boucle de tentatives avec d√©lai exponentiel
  while (true) {
    try {
      return await tryMultipleUploadMethods();
    } catch (error) {
      console.error(`‚ùå Erreur lors de la tentative ${retryCount + 1}:`, error);
      
      // Forcer une attente courte pour laisser Firebase se stabiliser
      const shortPause = Math.random() * 1000 + 500; // Entre 500-1500ms pour √©viter les conflits
      console.log(`‚è±Ô∏è Pause courte de ${shortPause}ms pour stabilisation`);
      await new Promise(resolve => setTimeout(resolve, shortPause));
      
      if (retryCount >= maxRetries) {
        console.error('üìµ Toutes les tentatives ont √©chou√©, abandon.');
        throw new Error(`√âchec du t√©l√©chargement apr√®s ${maxRetries + 1} tentatives: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      }
      
      retryCount++;
      const waitTime = 1000 * (2 ** retryCount);
      console.log(`üîÑ Nouvelle tentative ${retryCount + 1}/${maxRetries + 1} dans ${waitTime/1000} seconde(s)...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      
      // Pour la tentative suivante, utiliser un chemin l√©g√®rement diff√©rent
      if (retryCount % 2 === 0) {
        console.log('üîÄ Modification du chemin de stockage pour la prochaine tentative');
      }
    }
  }
};

/**
 * T√©l√©charge une image vers Firebase Storage
 * @param file - Le fichier image √† t√©l√©charger
 * @param onProgress - Fonction de callback pour suivre la progression
 * @returns Promise avec l'URL de t√©l√©chargement de l'image
 */
export const uploadProductImage = async (
  file: File,
  onProgress?: (progress: number) => void
): Promise<string> => {
  try {
    // V√©rifier que le fichier est une image
    if (!file.type.startsWith('image/')) {
      throw new Error('Le fichier n\'est pas une image valide');
    }
    
    // Analyser le fichier (utilit√© de d√©bogage)
    analyzeFile(file);
    
    console.log(`üì§ D√©but d'upload direct: ${file.name} (${(file.size / 1024).toFixed(1)}KB)`);
    
    // Upload direct sans compression
    return await uploadFileToStorage(
      file, 
      `products/images/${Date.now()}-${nanoid(8)}.${file.name.split('.').pop() || 'jpg'}`,
      onProgress
    );
  } catch (error) {
    console.error('Erreur lors du t√©l√©chargement de l\'image:', error);
    throw error;
  }
};

// Fonctionnalit√© vid√©o supprim√©e intentionnellement pour simplifier l'interface produit
