import { getFunctions, httpsCallable } from 'firebase/functions';
import { nanoid } from 'nanoid';

/**
 * Interface pour les options d'upload
 */
interface UploadVideoOptions {
  onProgress?: (progress: number) => void;
  collection?: string;
  metadata?: Record<string, any>;
}

/**
 * Interface pour le r√©sultat de l'upload
 */
interface UploadVideoResult {
  success: boolean;
  videoId?: string;
  videoUrl?: string;
  metadata?: any;
  error?: string;
}

/**
 * Convertit un fichier en cha√Æne base64
 */
const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
    reader.readAsDataURL(file);
  });
};

/**
 * Obtient l'extension d'un fichier √† partir de son nom
 */
const getFileExtension = (filename: string): string => {
  return filename.split('.').pop()?.toLowerCase() || '';
};

/**
 * V√©rifie si une vid√©o est valide (type et taille)
 */
const validateVideoFile = (file: File): { valid: boolean; message: string } => {
  // V√©rifier le type MIME
  const validTypes = ['video/mp4', 'video/webm', 'video/ogg', 'video/quicktime'];
  if (!validTypes.includes(file.type)) {
    return { 
      valid: false, 
      message: `Type de fichier non support√©. Types accept√©s: ${validTypes.join(', ')}`
    };
  }

  // V√©rifier la taille (max 100MB)
  const maxSize = 100 * 1024 * 1024; // 100MB
  if (file.size > maxSize) {
    return {
      valid: false,
      message: `La vid√©o est trop volumineuse (${(file.size / (1024 * 1024)).toFixed(2)}MB). Maximum: 100MB`
    };
  }

  return { valid: true, message: '' };
};

/**
 * Service pour t√©l√©charger une vid√©o vers Firestore via Cloud Function
 */
export const uploadVideoToFirestore = async (
  file: File,
  options: UploadVideoOptions = {}
): Promise<UploadVideoResult> => {
  console.log('üé¨ D√©but du processus d\'upload de vid√©o vers Firestore...');
  
  // Valider le fichier vid√©o
  const validation = validateVideoFile(file);
  if (!validation.valid) {
    console.error('‚ùå Validation du fichier √©chou√©e:', validation.message);
    return { success: false, error: validation.message };
  }
  
  // D√©terminer la collection Firestore pour les produits marketing
  const collection = options.collection || 'marketing_products/videos';
  console.log(`üìÅ Collection Firestore cible: ${collection}`);
  
  try {
    // Convertir le fichier en base64
    console.log('üîÑ Conversion de la vid√©o en base64...');
    const base64 = await fileToBase64(file);
    console.log('‚úÖ Vid√©o convertie en base64 avec succ√®s');
    
    // Simuler une progression pour l'interface utilisateur
    let progressInterval: NodeJS.Timeout | null = null;
    if (options.onProgress) {
      let progress = 0;
      progressInterval = setInterval(() => {
        progress += 5;
        if (progress > 95) {
          progress = 95; // On reste √† 95% jusqu'√† confirmation de succ√®s
        }
        options.onProgress?.(progress);
      }, 1000);
    }
    
    // Initialiser Firebase Functions avec la r√©gion correcte
    console.log('‚òÅÔ∏è Initialisation de Firebase Functions...');
    const functions = getFunctions(undefined, 'us-central1');
    const uploadVideoFn = httpsCallable(functions, 'uploadVideoToFirestore', { timeout: 300000 }); // 5 minutes timeout
    
    // G√©n√©rer un nom de fichier unique
    const fileName = `video-${nanoid(8)}.${getFileExtension(file.name)}`;
    
    // Appeler la Cloud Function
    console.log('üì§ Appel de la Cloud Function uploadVideoToFirestore...');
    const uploadData = {
      base64Data: base64,
      fileName,
      contentType: file.type,
      fileType: 'video',
      collection,
      ...options.metadata
    };
    
    const result = await uploadVideoFn(uploadData);
    
    // Nettoyer l'intervalle de progression simul√©e
    if (progressInterval) {
      clearInterval(progressInterval);
    }
    
    // Mettre √† jour la progression √† 100% pour signaler la fin
    if (options.onProgress) {
      options.onProgress(100);
    }
    
    // Traiter le r√©sultat
    const data = result.data as any;
    console.log('‚úÖ R√©ponse de la Cloud Function:', data);
    
    if (data.success && data.videoUrl) {
      return {
        success: true,
        videoId: data.videoId,
        videoUrl: data.videoUrl,
        metadata: data.metadata
      };
    } else {
      console.error('‚ùå Erreur inattendue lors de l\'upload de la vid√©o');
      return { 
        success: false, 
        error: '√âchec de l\'upload de la vid√©o: R√©ponse invalide du serveur'
      };
    }
    
  } catch (error: any) {
    console.error('‚ùå Erreur lors de l\'upload de la vid√©o:', error);
    
    // Nettoyer l'intervalle de progression si n√©cessaire
    if (options.onProgress) {
      options.onProgress(0); // R√©initialiser la progression
    }
    
    // Extraire le message d'erreur de Firebase Functions
    let errorMessage = 'Erreur inconnue lors de l\'upload';
    if (error.code === 'functions/invalid-argument') {
      errorMessage = error.message || 'Arguments invalides';
    } else if (error.code === 'functions/internal') {
      errorMessage = error.message || 'Erreur interne du serveur';
    } else if (error.message) {
      errorMessage = error.message;
    }
    
    return { success: false, error: errorMessage };
  }
};

/**
 * Service pour r√©cup√©rer les m√©tadonn√©es d'une vid√©o depuis Firestore
 */
export const getVideoMetadata = async (videoId: string, collection: string = 'videos'): Promise<any> => {
  try {
    // Ici, vous pouvez impl√©menter la logique pour r√©cup√©rer les m√©tadonn√©es depuis Firestore
    // Cette fonction est laiss√©e √† impl√©menter selon les besoins sp√©cifiques
    console.log(`üìã R√©cup√©ration des m√©tadonn√©es de la vid√©o ${videoId} depuis ${collection}`);
    
    // Exemple d'impl√©mentation (√† adapter)
    // const videoDoc = await firestore.collection(collection).doc(videoId).get();
    // return videoDoc.exists ? videoDoc.data() : null;
    
    return {
      // Placeholder pour l'impl√©mentation future
      videoId,
      collection
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des m√©tadonn√©es vid√©o:', error);
    throw error;
  }